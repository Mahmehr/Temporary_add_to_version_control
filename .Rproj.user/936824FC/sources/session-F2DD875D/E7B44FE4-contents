
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Markdown

Required libraries
```{r pressure, echo=TRUE}
library(data.table)
library(stringr)
library(psych)
library(knitr)
library(tidyverse)
library(readxl)

```

```{r}
# Download O*NET data from https://www.onetcenter.org/database.html?p=2. Other formats available
download.file("https://www.onetcenter.org/dl_files/database/db_23_0_excel/Knowledge.xlsx", "knowledge.xlsx", mode = "wb")
download.file("https://www.onetcenter.org/dl_files/database/db_23_0_excel/Skills.xlsx", "skills.xlsx", mode = "wb")
download.file("https://www.onetcenter.org/dl_files/database/db_23_0_excel/Work%20Activities.xlsx", "workactivities.xlsx", mode = "wb")

```

```{r}
# Read in O*NET data and BII+E crosswalk
knowledge <- as.data.table(read_excel("knowledge.xlsx"))
skill <- as.data.table(read_excel("skills.xlsx"))
work.activity <- as.data.table(read_excel("workactivities.xlsx"))
```

```{r}
knowledge
```

```{r}
skill
```

```{r}
work.activity
```

```{r}
library(readr) #to read from github
```

```{r}
urlfile = "https://raw.githubusercontent.com/BrookfieldIIE/NOC_ONet_Crosswalk/master/onetnoc.csv"
```

```{r}
crosswalk <- as.data.table(read_csv(url(urlfile)))
```


```{r}
head(crosswalk)
```


```{r}
# Align O*NET skills, knowledge and work activity data
full.skill <- rbindlist(list(knowledge,skill,work.activity))
names(full.skill) <- c("onet","title","element.id","element.name","scale.id","scale.name","value","N","stder","lci","uci","sup","nr","date","source")
full.skill[,c("N","date","source","lci","uci"):=NULL]

```


```{r}
head(full.skill)
```


```{r}
# Link O*NET data to NOC using crosswalk
setkey(crosswalk,onet)
```

```{r}
setkey(full.skill,onet)
```

```{r}
full.crosswalk.skill <- crosswalk[full.skill,nomatch=0]
full.crosswalk.skill
```
```{r}
full.avg.crosswalk.skill <- full.crosswalk.skill[,mean(value),by=.(noc_title,element.id,element.name,scale.id,scale.name)]
full.avg.crosswalk.skill
```
```{r}
#Clean environment
rm(full.crosswalk.skill) #Remove redundancies
rm(full.skill)
rm(work.activity,skill,knowledge)

```

```{r}
# Select the technology skills of interest for each NOC
tech.skills <- c("2.B.3.b", "2.B.3.e", "2.C.3.a", "4.A.3.b.1", "2.C.3.b", "2.C.9.a") #using element id
tech.skills
```

```{r}
individual.ranking <- full.avg.crosswalk.skill[element.id %in% tech.skills,prod(V1),by=.(noc_title,element.id)]
individual.ranking
```

```{r}
individual.ranking <- reshape(individual.ranking,direction="wide",v.names = c("V1"),timevar="element.id",idvar="noc_title")
individual.ranking
```

```{r}
individual.ranking <- individual.ranking[!is.na(noc_title)] #One O*NET occupation was not matched to NOC in the crosswalk and must be removed
individual.ranking
```

```{r}
setkey(individual.ranking,noc_title)
```


```{r}
# Rank each NOC across each of the selected tech skills
for(n in tech.skills){
  individual.ranking[,str_c("rank.",n):=frankv(get(str_c("V1.",n)),order=-1)]
}
```

```{r}
individual.ranking
```


```{r}
# Calculate the harmonic means for each NOC under three ranking systems

## Rankings across all tech skills
for(n in seq(1,483)){
  individual.ranking[n,harm.rank:=harmonic.mean(c(get("rank.2.B.3.b")+1,rank.2.B.3.e+1,
                                                  rank.2.C.3.a+1,rank.4.A.3.b.1+1,rank.2.C.3.b+1,rank.2.C.9.a+1))]
}

## Rankings across digital skills - used to distinguish between digital and high-tech occupations
for(n in seq(1,483)){
  individual.ranking[n,harm.rank.digital:=harmonic.mean(c(rank.2.B.3.e+1,
                                                          rank.2.C.3.a+1,rank.4.A.3.b.1+1,rank.2.C.9.a+1))]
}

## Rankings excluding knowledge of telecommunications
### Used for sensititivity analysis in report, but not for findings
for(n in seq(1,483)){
  individual.ranking[n,harm.rank.no.tel:=harmonic.mean(c(rank.2.B.3.b+1,rank.2.B.3.e+1,
                                                         rank.2.C.3.a+1,rank.4.A.3.b.1+1,rank.2.C.3.b+1))]
}

```

```{r}
individual.ranking
```


```{r}
# Select tech, high-tech, and digital occupations based on cut-offs from analyzing rankings

tech.cut.off <- 25 #Define the tech cut off rank
digital.cut.off <- 17 #Define digital cut-off rank

individual.ranking[,tech:=0]
individual.ranking[harm.rank < tech.cut.off, tech:=1]
individual.ranking[harm.rank < tech.cut.off, digital:= "High-Tech"]
individual.ranking[harm.rank < tech.cut.off & harm.rank.digital < digital.cut.off, digital:= "Digital"]
individual.ranking[harm.rank.no.tel < tech.cut.off,tech.no.tel:=1]

```

```{r}
individual.ranking
```


```{r}
# Rename fields to be easier to understand prior to output
individual.ranking <- individual.ranking %>%
  rename("2.C.3.a - Comp and Elec" = "V1.2.C.3.a",
         "2.C.3.b - Eng and Tech" = "V1.2.C.3.b",
         "2.C.9.a - Telco" = "V1.2.C.9.a" ,
         "2.B.3.b - Tech Design" = "V1.2.B.3.b",
         "2.B.3.e - Programming" = "V1.2.B.3.e" ,
         "4.A.3.b.1 - Inter w Comp" =  "V1.4.A.3.b.1",
         "Rank - Comp and Elec" = "rank.2.C.3.a",
         "Rank - Eng and Tech" = "rank.2.C.3.b",
         "Rank - Telco" = "rank.2.C.9.a",
         "Rank - Tech Design" = "rank.2.B.3.b",
         "Rank - Programming" = "rank.2.B.3.e",
         "Rank - Inter w Comp" = "rank.4.A.3.b.1"
         )
```

```{r}
#Create a NOC code and name field for convenience
individual.ranking$noc_code <- substr(individual.ranking$noc_title, 1, 4)
individual.ranking$noc_name <- substr(individual.ranking$noc_title, 5, nchar(individual.ranking$noc_title))

```

```{r}
individual.ranking
```


```{r}
#Write the CSV file containing the rankings
write.csv(individual.ranking,"tech.sector.def.csv",row.names=FALSE)
```

```{r}
#Clean up the environment
rm(crosswalk, digital.cut.off, n, tech.cut.off, tech.skills)
```



```{r}
#Load and process skill and occupation data
onet.s <- full.avg.crosswalk.skill
onet.s$element<- paste(substr(onet.s$element.id, 1, 5), onet.s$element.name)

onet.s <- onet.s %>%
  select(noc_title, element, scale.name, V1) %>%
  filter(!is.na(noc_title)) %>%
  spread(scale.name, V1) %>%
  mutate(score = Importance * Level) %>% # Multiplied importance by level  of skill per O*NET recommendations
  select(noc_title, element, score) %>%
  spread(element, score) %>%
  remove_rownames %>% 
  column_to_rownames(var="noc_title")

```


```{r}
onet.s
```

```{r}
#Create principal components
onet.s.pca <- prcomp(onet.s, center=TRUE, scale.=TRUE, rank. = 5) # The last argument retains the first 5 PCs. This can be changed if you desire.

#Analyze principal component skill loadings
onet.loading <- as.data.frame(onet.s.pca$rotation) %>% rownames_to_column(var = "Skill") %>% arrange(desc(PC3))
write.csv(as.data.frame(onet.s.pca$rotation) %>% arrange(PC3), "PCA_skill_loads.csv")

#Analyze occupational scores
onet.pca <- as.data.frame(predict(onet.s.pca, newdata = onet.s))
write.csv(onet.s.pca$rotation, "PCA_occ_scores.csv")
```

```{r}
onet.s.pca
```


```{r}
onet.loading
```
```{r}
onet.pca
```



```{r}
## Importance of first k=5 (out of 109) components:
##                           PC1    PC2    PC3     PC4     PC5
## Standard deviation     6.4489 3.9767 2.7742 2.45908 1.83926
## Proportion of Variance 0.3816 0.1451 0.0706 0.05548 0.03104
## Cumulative Proportion  0.3816 0.5266 0.5972 0.65272 0.68375
```




